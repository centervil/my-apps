name: 'üîÑ E2E Test Gemini Workflows'

on:
  workflow_dispatch:
    inputs:
      test_scenario:
        description: 'E2E test scenario to run'
        required: true
        default: 'basic'
        type: choice
        options:
          - 'basic'
          - 'full'
          - 'security'
          - 'performance'
      create_test_data:
        description: 'Create test PR/issue for testing'
        required: false
        default: false
        type: boolean

defaults:
  run:
    shell: 'bash'

jobs:
  setup-test-environment:
    runs-on: 'ubuntu-latest'
    if: ${{ inputs.create_test_data }}
    permissions:
      contents: 'write'
      issues: 'write'
      pull-requests: 'write'
    outputs:
      test_pr_number: '${{ steps.create_pr.outputs.pr_number }}'
      test_issue_number: '${{ steps.create_issue.outputs.issue_number }}'
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4'

      - name: 'Create test branch and PR'
        id: 'create_pr'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          # Create a test branch
          timestamp=$(date +%s)
          branch_name="test/e2e-gemini-$timestamp"
          
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          git checkout -b "$branch_name"
          
          # Create a test file with some code to review
          mkdir -p test-files
          cat > test-files/test-code.js << 'EOF'
          // Test file for Gemini CLI review
          function calculateSum(a, b) {
            // TODO: Add input validation
            return a + b;
          }
          
          // Potential security issue: eval usage
          function processUserInput(input) {
            return eval(input);
          }
          
          // Performance issue: inefficient loop
          function findMax(numbers) {
            let max = numbers[0];
            for (let i = 0; i < numbers.length; i++) {
              for (let j = 0; j < numbers.length; j++) {
                if (numbers[j] > max) {
                  max = numbers[j];
                }
              }
            }
            return max;
          }
          EOF
          
          git add test-files/test-code.js
          git commit -m "Add test code for E2E Gemini CLI testing"
          git push origin "$branch_name"
          
          # Create PR
          pr_number=$(gh pr create \
            --title "üß™ E2E Test PR for Gemini CLI" \
            --body "This PR is created automatically for testing Gemini CLI workflows. It contains intentional issues for testing:
          
          - Missing input validation
          - Security vulnerability (eval usage)  
          - Performance issue (inefficient algorithm)
          - Documentation gaps
          
          This PR will be automatically closed after testing." \
            --head "$branch_name" \
            --base "main" \
            --label "test" \
            --output json | jq -r '.number')
          
          echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
          echo "Created test PR #$pr_number"

      - name: 'Create test issue'
        id: 'create_issue'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          # Create a test issue
          issue_number=$(gh issue create \
            --title "üß™ E2E Test Issue for Gemini CLI Triage" \
            --body "This issue is created automatically for testing Gemini CLI triage workflows.
          
          ## Problem Description
          The application crashes when processing large datasets. This appears to be a memory leak issue.
          
          ## Steps to Reproduce
          1. Load a dataset with >10,000 records
          2. Process the data using the batch processor
          3. Monitor memory usage
          4. Application crashes after ~5 minutes
          
          ## Expected Behavior
          Application should handle large datasets without memory issues.
          
          ## Environment
          - OS: Ubuntu 20.04
          - Node.js: v18.17.0
          - Memory: 8GB
          
          ## Additional Context
          This might be related to the recent changes in the data processing module.
          
          This issue will be automatically closed after testing." \
            --label "test" \
            --output json | jq -r '.number')
          
          echo "issue_number=$issue_number" >> $GITHUB_OUTPUT
          echo "Created test issue #$issue_number"

  test-basic-functionality:
    needs: [setup-test-environment]
    if: ${{ always() && (inputs.test_scenario == 'basic' || inputs.test_scenario == 'full') }}
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      issues: 'write'
      pull-requests: 'write'
    steps:
      - name: 'Test manual review trigger'
        if: ${{ needs.setup-test-environment.outputs.test_pr_number }}
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          PR_NUMBER: '${{ needs.setup-test-environment.outputs.test_pr_number }}'
        run: |
          echo "Testing manual review trigger..."
          
          # Post a comment to trigger review
          gh pr comment "$PR_NUMBER" --body "@gemini-cli /review Please focus on security and performance issues"
          
          echo "Posted review trigger comment on PR #$PR_NUMBER"

      - name: 'Test manual triage trigger'
        if: ${{ needs.setup-test-environment.outputs.test_issue_number }}
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          ISSUE_NUMBER: '${{ needs.setup-test-environment.outputs.test_issue_number }}'
        run: |
          echo "Testing manual triage trigger..."
          
          # Post a comment to trigger triage
          gh issue comment "$ISSUE_NUMBER" --body "@gemini-cli /triage"
          
          echo "Posted triage trigger comment on issue #$ISSUE_NUMBER"

      - name: 'Test general invoke trigger'
        if: ${{ needs.setup-test-environment.outputs.test_issue_number }}
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          ISSUE_NUMBER: '${{ needs.setup-test-environment.outputs.test_issue_number }}'
        run: |
          echo "Testing general invoke trigger..."
          
          # Post a general question
          gh issue comment "$ISSUE_NUMBER" --body "@gemini-cli Can you help me understand the best practices for memory management in Node.js applications?"
          
          echo "Posted general invoke comment on issue #$ISSUE_NUMBER"

  test-security-scenarios:
    needs: [setup-test-environment]
    if: ${{ always() && (inputs.test_scenario == 'security' || inputs.test_scenario == 'full') }}
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      issues: 'write'
      pull-requests: 'write'
    steps:
      - name: 'Test unauthorized user trigger'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          echo "Testing security constraints..."
          echo "Note: This test simulates unauthorized access but cannot actually test it in this context."
          echo "In a real scenario, a user without OWNER/MEMBER/COLLABORATOR permissions would be blocked."

      - name: 'Test fork protection'
        run: |
          echo "Testing fork protection logic..."
          echo "Verifying that workflows include fork protection checks..."
          
          if grep -q "github.event.pull_request.head.repo.fork == false" .github/workflows/gemini-dispatch.yml; then
            echo "‚úÖ Fork protection check found in dispatch workflow"
          else
            echo "‚ùå Fork protection check missing"
            exit 1
          fi

  test-performance-scenarios:
    if: ${{ inputs.test_scenario == 'performance' || inputs.test_scenario == 'full' }}
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    steps:
      - name: 'Test workflow timeout configurations'
        run: |
          echo "Testing performance configurations..."
          
          # Check timeout settings
          workflows=(
            ".github/workflows/gemini-review.yml"
            ".github/workflows/gemini-triage.yml"
            ".github/workflows/gemini-invoke.yml"
          )
          
          for workflow in "${workflows[@]}"; do
            if grep -q "timeout-minutes:" "$workflow"; then
              timeout=$(grep "timeout-minutes:" "$workflow" | head -1 | awk '{print $2}')
              echo "‚úÖ $workflow has timeout: $timeout minutes"
            else
              echo "‚ö†Ô∏è $workflow missing timeout configuration"
            fi
          done

      - name: 'Test concurrency controls'
        run: |
          echo "Testing concurrency controls..."
          
          workflows=(
            ".github/workflows/gemini-review.yml"
            ".github/workflows/gemini-triage.yml"
            ".github/workflows/gemini-invoke.yml"
          )
          
          for workflow in "${workflows[@]}"; do
            if grep -q "concurrency:" "$workflow"; then
              echo "‚úÖ $workflow has concurrency control"
            else
              echo "‚ö†Ô∏è $workflow missing concurrency control"
            fi
          done

  monitor-workflow-execution:
    needs: [test-basic-functionality, test-security-scenarios]
    if: ${{ always() && inputs.create_test_data }}
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      actions: 'read'
    steps:
      - name: 'Monitor triggered workflows'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          echo "Monitoring workflow executions..."
          
          # Wait a bit for workflows to start
          sleep 30
          
          # List recent workflow runs
          echo "Recent workflow runs:"
          gh run list --limit 10 --json status,name,conclusion,createdAt
          
          # Check for Gemini dispatch workflows
          gemini_runs=$(gh run list --workflow="gemini-dispatch.yml" --limit 5 --json status,conclusion,createdAt)
          
          if [[ "$gemini_runs" != "[]" ]]; then
            echo "‚úÖ Gemini dispatch workflows have been triggered"
            echo "$gemini_runs"
          else
            echo "‚ö†Ô∏è No recent Gemini dispatch workflow runs found"
          fi

  test-error-handling:
    runs-on: 'ubuntu-latest'
    if: ${{ inputs.test_scenario == 'full' }}
    permissions:
      contents: 'read'
      issues: 'write'
    steps:
      - name: 'Test invalid command handling'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          echo "Testing error handling scenarios..."
          
          # Create a temporary issue for testing
          issue_number=$(gh issue create \
            --title "üß™ Error Handling Test" \
            --body "Testing error handling" \
            --label "test" \
            --output json | jq -r '.number')
          
          # Test invalid command
          gh issue comment "$issue_number" --body "@gemini-cli /invalid-command"
          
          echo "Posted invalid command to issue #$issue_number"
          
          # Clean up
          sleep 5
          gh issue close "$issue_number"

  cleanup-test-data:
    needs: [setup-test-environment, monitor-workflow-execution]
    if: ${{ always() && inputs.create_test_data }}
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'write'
      issues: 'write'
      pull-requests: 'write'
    steps:
      - name: 'Cleanup test PR'
        if: ${{ needs.setup-test-environment.outputs.test_pr_number }}
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          PR_NUMBER: '${{ needs.setup-test-environment.outputs.test_pr_number }}'
        run: |
          echo "Cleaning up test PR #$PR_NUMBER..."
          
          # Close and delete the PR
          gh pr close "$PR_NUMBER" --comment "E2E testing completed. Closing test PR."
          
          # Delete the test branch
          branch_name=$(gh pr view "$PR_NUMBER" --json headRefName --jq '.headRefName')
          git push origin --delete "$branch_name" || echo "Branch already deleted"

      - name: 'Cleanup test issue'
        if: ${{ needs.setup-test-environment.outputs.test_issue_number }}
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          ISSUE_NUMBER: '${{ needs.setup-test-environment.outputs.test_issue_number }}'
        run: |
          echo "Cleaning up test issue #$ISSUE_NUMBER..."
          
          # Close the issue
          gh issue close "$ISSUE_NUMBER" --comment "E2E testing completed. Closing test issue."

  e2e-summary:
    needs: [test-basic-functionality, test-security-scenarios, test-performance-scenarios, monitor-workflow-execution, test-error-handling]
    if: always()
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    steps:
      - name: 'E2E Test Summary'
        run: |
          echo "## üîÑ E2E Test Summary"
          echo ""
          echo "Test Scenario: ${{ inputs.test_scenario }}"
          echo "Create Test Data: ${{ inputs.create_test_data }}"
          echo ""
          echo "Test Results:"
          echo "- Basic Functionality: ${{ needs.test-basic-functionality.result }}"
          echo "- Security Scenarios: ${{ needs.test-security-scenarios.result }}"
          echo "- Performance Scenarios: ${{ needs.test-performance-scenarios.result }}"
          echo "- Workflow Monitoring: ${{ needs.monitor-workflow-execution.result }}"
          echo "- Error Handling: ${{ needs.test-error-handling.result }}"
          echo ""
          
          # Overall result
          if [[ "${{ needs.test-basic-functionality.result }}" == "success" ]] && \
             [[ "${{ needs.test-security-scenarios.result }}" == "success" ]] && \
             [[ "${{ needs.test-performance-scenarios.result }}" == "success" ]]; then
            echo "‚úÖ E2E tests completed successfully!"
            echo ""
            echo "## Next Steps"
            echo "1. Review the triggered Gemini workflows in the Actions tab"
            echo "2. Check the comments posted by Gemini CLI on test PR/issues"
            echo "3. Verify that the AI responses are appropriate and helpful"
            echo "4. Monitor for any errors or unexpected behavior"
          else
            echo "‚ö†Ô∏è Some E2E tests had issues. Please review the logs."
          fi
          
          echo ""
          echo "## Manual Verification"
          echo "After running this E2E test, manually verify:"
          echo "- Gemini CLI posted appropriate review comments"
          echo "- Issue triage added relevant labels and comments"
          echo "- General invoke provided helpful responses"
          echo "- No unauthorized access was allowed"
          echo "- Workflows completed within expected timeframes"