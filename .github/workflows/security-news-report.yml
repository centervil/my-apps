name: Generate Daily Security News Report
permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (limited API calls)'
        required: false
        default: false
        type: boolean
      topic:
        description: 'Custom topic for the report'
        required: false
        default: 'Daily Cybersecurity Threat Briefing'
        type: string
  schedule:
    - cron: "0 0 * * *" # Runs every day at midnight UTC

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/security-news-agent

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ./apps/security-news-agent/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run linting checks
        run: |
          poetry run flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
          poetry run mypy src/ --ignore-missing-imports

      - name: Run unit tests
        run: poetry run pytest tests/unit/ -v --tb=short

      - name: Run integration tests
        run: poetry run pytest tests/integration/ -v --tb=short

      - name: Generate test coverage report
        run: |
          poetry run pytest --cov=src/security_news_agent --cov-report=xml --cov-report=term-missing
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/security-news-agent/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  generate-report:
    needs: test
    runs-on: ubuntu-latest
    if: success()

    defaults:
      run:
        working-directory: ./apps/security-news-agent

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ./apps/security-news-agent/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction --no-dev

      - name: Install Marp CLI
        run: sudo npm install -g @marp-team/marp-cli

      - name: Validate configuration
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
        run: poetry run python -m security_news_agent --validate-only

      - name: Generate report
        env:
          # API Keys from repository secrets
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
          # Configuration
          GEMINI_MODEL_NAME: "gemini-1.5-flash-latest"
          SLIDE_FORMAT: "pdf"
          MARP_THEME: "default"
          MARP_PAGINATE: "true"
          LANGCHAIN_PROJECT: "security-news-agent-prod"
          LANGCHAIN_TRACING_V2: "true"
        run: |
          if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
            echo "Running in test mode"
            poetry run python -m security_news_agent \
              --test-mode \
              --topic "${{ github.event.inputs.topic || 'Daily Cybersecurity Threat Briefing' }}" \
              --log-level INFO
          else
            echo "Running in production mode"
            poetry run python -m security_news_agent \
              --topic "${{ github.event.inputs.topic || 'Daily Cybersecurity Threat Briefing' }}" \
              --log-level INFO
          fi

      - name: Validate generated report
        run: |
          # Check if report was generated
          if [ ! -d "slides" ] || [ -z "$(ls -A slides/)" ]; then
            echo "❌ No report files generated"
            exit 1
          fi
          
          # Check for markdown files
          if ! ls slides/*.md 1> /dev/null 2>&1; then
            echo "❌ No markdown files found"
            exit 1
          fi
          
          # Validate markdown content
          for md_file in slides/*.md; do
            if [ -f "$md_file" ]; then
              echo "✅ Found report: $md_file"
              # Basic content validation
              if ! grep -q "marp: true" "$md_file"; then
                echo "⚠️ Warning: $md_file missing Marp header"
              fi
              if ! grep -q "# " "$md_file"; then
                echo "⚠️ Warning: $md_file missing main title"
              fi
              # Check file size (should be substantial)
              size=$(wc -c < "$md_file")
              if [ "$size" -lt 500 ]; then
                echo "⚠️ Warning: $md_file seems too small ($size bytes)"
              else
                echo "✅ $md_file validation passed ($size bytes)"
              fi
            fi
          done

      - name: Upload report artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-news-report-${{ github.run_number }}
          path: ./apps/security-news-agent/slides/
          retention-days: 30

      - name: Commit and push report
        run: |
          git config user.name "Security News Bot"
          git config user.email "security-news-bot@github.com"
          
          # Add generated files
          git add slides/
          
          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "No new report generated, nothing to commit."
            echo "commit_made=false" >> $GITHUB_OUTPUT
          else
            # Create commit message with metadata
            report_date=$(date -u +'%Y-%m-%d')
            commit_msg="docs(security): generate daily security report for $report_date"
            
            if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
              commit_msg="$commit_msg [test-mode]"
            fi
            
            if [ "${{ github.event.inputs.topic }}" != "" ] && [ "${{ github.event.inputs.topic }}" != "Daily Cybersecurity Threat Briefing" ]; then
              commit_msg="$commit_msg - ${{ github.event.inputs.topic }}"
            fi
            
            git commit -m "$commit_msg"
            git push
            echo "commit_made=true" >> $GITHUB_OUTPUT
            echo "✅ Report committed and pushed successfully"
          fi

      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Security News Report Generation Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `The daily security news report generation failed.
              
              **Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              **Trigger:** ${context.eventName}
              **Branch:** ${context.ref}
              
              Please check the workflow logs for details.`,
              labels: ['bug', 'automation', 'security-news']
            })

  cleanup:
    needs: generate-report
    runs-on: ubuntu-latest
    if: always()
    defaults:
      run:
        working-directory: ./apps/security-news-agent

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean up old reports
        run: |
          # Keep only the last 30 report files to avoid repository bloat
          if [ -d "slides" ]; then
            cd slides
            # Count total files
            total_files=$(ls -1 *.md *.pdf *.png *.html 2>/dev/null | wc -l)
            echo "Total report files: $total_files"
            
            if [ "$total_files" -gt 30 ]; then
              echo "Cleaning up old reports (keeping 30 most recent)"
              # Remove old files (keep 30 most recent)
              ls -t *.md *.pdf *.png *.html 2>/dev/null | tail -n +31 | xargs -r rm -f
              
              # Commit cleanup if files were removed
              cd ..
              git config user.name "Security News Bot"
              git config user.email "security-news-bot@github.com"
              git add slides/
              
              if ! git diff --staged --quiet; then
                git commit -m "chore(security): cleanup old security reports"
                git push
                echo "✅ Old reports cleaned up"
              fi
            else
              echo "No cleanup needed"
            fi
          fi
