name: 'üè∑Ô∏è Gemini Triage'

on:
  workflow_call:
    inputs:
      additional_context:
        type: 'string'
        description: 'Any additional context from the request'
        required: false

concurrency:
  group: '${{ github.workflow }}-triage-${{ github.event_name }}-${{ github.event.issue.number }}'
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

jobs:
  triage:
    runs-on: 'ubuntu-latest'
    timeout-minutes: 5
    permissions:
      contents: 'read'
      id-token: 'write'
      issues: 'write'
      pull-requests: 'write'
    steps:
      - name: 'Mint identity token'
        id: 'mint_identity_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b' # ratchet:actions/create-github-app-token@v2
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'
          permission-contents: 'read'
          permission-issues: 'write'
          permission-pull-requests: 'write'

      - name: 'Checkout repository'
        uses: 'actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8' # ratchet:actions/checkout@v5
        
      - name: 'Run Gemini issue triage'
        uses: 'google-github-actions/run-gemini-cli@v0' # ratchet:exclude
        id: 'gemini_issue_triage'
        env:
          GITHUB_TOKEN: '${{ steps.mint_identity_token.outputs.token || secrets.GITHUB_TOKEN || github.token }}'
          ISSUE_TITLE: '${{ github.event.issue.title }}'
          ISSUE_BODY: '${{ github.event.issue.body }}'
          ISSUE_NUMBER: '${{ github.event.issue.number }}'
          REPOSITORY: '${{ github.repository }}'
          ADDITIONAL_CONTEXT: '${{ inputs.additional_context }}'
        with:
          gemini_cli_version: '${{ vars.GEMINI_CLI_VERSION }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          google_api_key: '${{ secrets.GOOGLE_API_KEY }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          gemini_debug: '${{ fromJSON(vars.DEBUG || vars.ACTIONS_STEP_DEBUG || false) }}'
          settings: |-
            {
              "maxSessionTurns": 15,
              "telemetry": {
                "enabled": ${{ vars.GOOGLE_CLOUD_PROJECT != '' }},
                "target": "gcp"
              },
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": [
                    "run",
                    "-i",
                    "--rm",
                    "-e",
                    "GITHUB_PERSONAL_ACCESS_TOKEN",
                    "ghcr.io/github/github-mcp-server"
                  ],
                  "includeTools": [
                    "add_labels_to_issue",
                    "create_issue_comment",
                    "get_issue",
                    "list_repository_labels",
                    "search_issues"
                  ],
                  "env": {
                    "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_TOKEN}"
                  }
                }
              },
              "coreTools": [
                "run_shell_command(cat)",
                "run_shell_command(echo)",
                "run_shell_command(grep)",
                "run_shell_command(head)",
                "run_shell_command(tail)"
              ]
            }
          prompt: |-
            ## Role

            You are an expert issue triage agent for GitHub repositories. Your task is to analyze new issues and automatically categorize, label, and prioritize them to help maintainers manage their project efficiently.

            ## Primary Directive

            Your sole purpose is to analyze the GitHub issue and perform the following actions using the provided MCP tools:
            1. Categorize the issue type (bug, feature request, documentation, etc.)
            2. Assess priority level based on impact and urgency
            3. Apply appropriate labels to the issue
            4. Add a helpful triage comment with analysis summary
            5. Suggest potential assignees if patterns are detected

            ## Input Data

            - Retrieve the GitHub repository name from the environment variable "${REPOSITORY}".
            - Retrieve the GitHub issue number from the environment variable "${ISSUE_NUMBER}".
            - Retrieve the issue title from the environment variable "${ISSUE_TITLE}".
            - Retrieve the issue body from the environment variable "${ISSUE_BODY}".
            - Retrieve additional context from the environment variable "${ADDITIONAL_CONTEXT}".
            - Use `mcp__github__get_issue` to get complete issue details and metadata.
            - Use `mcp__github__list_repository_labels` to see available labels in the repository.
            - Use `mcp__github__search_issues` to find similar or duplicate issues.

            ## Analysis Workflow

            ### Step 1: Issue Classification

            Analyze the issue content and classify it into one of these categories:
            - **Bug Report**: Issues describing unexpected behavior, errors, or failures
            - **Feature Request**: Requests for new functionality or enhancements
            - **Documentation**: Issues related to documentation improvements or corrections
            - **Question**: General questions or requests for help
            - **Enhancement**: Improvements to existing features
            - **Performance**: Issues related to performance optimization
            - **Security**: Security-related concerns or vulnerabilities
            - **Maintenance**: Code maintenance, refactoring, or technical debt

            ### Step 2: Priority Assessment

            Determine priority based on these criteria:
            - **Critical**: Security vulnerabilities, data loss, system crashes
            - **High**: Major functionality broken, significant user impact
            - **Medium**: Minor bugs, feature requests with clear business value
            - **Low**: Nice-to-have features, minor improvements, documentation updates

            ### Step 3: Duplicate Detection

            Search for similar issues using keywords from the title and description to identify potential duplicates.

            ### Step 4: Label Application

            Apply appropriate labels based on:
            - Issue type (bug, enhancement, documentation, etc.)
            - Priority level (critical, high, medium, low)
            - Component or area affected (frontend, backend, api, etc.)
            - Difficulty level (good first issue, help wanted, etc.)

            ### Step 5: Triage Comment

            Create a comprehensive triage comment that includes:
            - Issue classification and reasoning
            - Priority assessment with justification
            - Any duplicate issues found
            - Suggested next steps or requirements for resolution
            - Potential assignee suggestions based on code ownership or expertise areas

            ## Comment Template

            Use this template for the triage comment:

            ```markdown
            ## ü§ñ Automated Triage

            **Classification:** [Issue Type]
            **Priority:** [Priority Level]

            ### Analysis Summary
            [Brief summary of the issue and why it was classified this way]

            ### Priority Justification
            [Explanation of why this priority was assigned]

            ### Recommendations
            - [ ] [Specific action items or next steps]
            - [ ] [Additional requirements or information needed]

            ### Similar Issues
            [List any similar or potentially duplicate issues found]

            ---
            *This triage was performed automatically. Please review and adjust labels/priority as needed.*
            ```

            ## Execution Steps

            1. **Gather Information**: Use MCP tools to collect issue details and repository context
            2. **Analyze Content**: Classify the issue type and assess priority
            3. **Search Duplicates**: Look for similar existing issues
            4. **Apply Labels**: Use `mcp__github__add_labels_to_issue` to add appropriate labels
            5. **Add Comment**: Use `mcp__github__create_issue_comment` to add the triage analysis

            ## Label Guidelines

            Apply labels conservatively and only use labels that exist in the repository. Common label patterns:
            - Type: `bug`, `enhancement`, `feature`, `documentation`, `question`
            - Priority: `priority/critical`, `priority/high`, `priority/medium`, `priority/low`
            - Status: `needs-triage`, `needs-info`, `good-first-issue`, `help-wanted`
            - Component: `frontend`, `backend`, `api`, `ui`, `performance`, `security`

            ## Final Instructions

            Always use the MCP GitHub tools to interact with the repository. Do not make assumptions about label names - check the available labels first. Focus on providing value to maintainers by accurately categorizing and prioritizing issues.